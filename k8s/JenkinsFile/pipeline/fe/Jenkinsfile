pipeline {
    agent any

    environment {
        DOCKER_IMAGE = 'daegi0923/newscrab-front:latest'  // Docker 이미지 이름
        LOCAL_REPO_PATH = 'FE-newscrab/newscrab'  // 로컬 레포지토리 경로
        GIT_CREDENTIALS = 'gitlab-login'  // GitLab 자격증명 ID (Jenkins에 설정된 크리덴셜 ID)
        DOCKER_HUB_CREDENTIALS = 'docker-hub-login'  // Docker Hub 자격증명 ID (Jenkins에 저장된 Docker Hub 크리덴셜 ID)
        GIT_BRANCH = 'fe-develop'  // 체크아웃할 Git 브랜치
        GIT_REMOTE = 'origin'  // 원격 저장소 이름
    }
    
    
    stages {
        stage('Git Clone') {
            steps {
                script {
                    git branch: "${GIT_BRANCH}", credentialsId: 'gitlab-login', url: 'https://lab.ssafy.com/s11-bigdata-recom-sub2/S11P22E207.git'
                }
            }
        }

        stage('Show Git Branch') {
            steps {
                script {
                    def branch = sh(script: 'git rev-parse --abbrev-ref HEAD', returnStdout: true).trim()
                    echo "Current Git Branch: ${branch}"
                }
            }
        }

        stage('Show Directory Structure') {
            steps {
                script {
                    sh 'find .'
                }
            }
        }

        stage('GitLab Repository Checkout') {
            steps {
                script {
                    echo '********** GitLab Repository Checkout **********'
                    // GitLab 리포지토리에서 fe-develop 브랜치 체크아웃
                    git branch: "${GIT_BRANCH}",
                        credentialsId: "${GIT_CREDENTIALS}",  // GitLab 자격 증명 ID
                        url: 'https://lab.ssafy.com/s11-bigdata-recom-sub2/S11P22E207.git'  // GitLab 리포지토리 URL
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    echo '********** Frontend Build Start **********'

                    dir("${LOCAL_REPO_PATH}") {
                        // Docker 이미지 빌드
                        sh "ls -al"
                        sh "docker build -t ${DOCKER_IMAGE} ."
                    }

                    echo '********** Frontend Build End **********'
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    echo '********** Pushing Docker Image to Docker Hub **********'

                    // Docker Hub 로그인 (크리덴셜 사용)
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USERNAME')]) {
                        sh "echo ${DOCKER_HUB_PASSWORD} | docker login -u ${DOCKER_HUB_USERNAME} --password-stdin"
                    }

                    // Docker 이미지를 Docker Hub로 푸시
                    sh "docker push ${DOCKER_IMAGE}"
                }
            }
        }
    }
        stage('Deploy to Kubernetes') {
            steps {
                // Kubernetes에 롤링 업데이트 적용
                withCredentials([file(credentialsId: 'kube-config', variable: 'KUBECONFIG')]) {
                sh 'kubectl get pods'
                sh 'kubectl rollout restart deployment/spring-deployment'
              }

            }
        }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
